#!/usr/bin/env bash
# Sets up your web servers for the deployment of web_static

# Installation of NginX
sudo apt-get update
sudo apt-get -y install nginx
# Allowing Nginx through the firewall
# sudo ufw enable (may disrupt SSH connection if not allowed)
sudo ufw allow 'Nginx HTTP'

# Creating folders to store web_static files
sudo mkdir -p /data/web_static/releases/test/
sudo mkdir -p /data/web_static/shared/

# Writing "Hello World!" to test served html
echo "Hello World!" > /data/web_static/releases/test/index.html
# Creating a symbolic link to the test folder
sudo ln -sf /data/web_static/releases/test/ /data/web_static/current

# Changing ownership of the /data folder
chown -R ubuntu /data/
chgrp -R ubuntu /data/

# Setting the nginx configuration to:
#  1. Create the new error page and setting it as the 404 error page
#  2. Add a custom header to identify the server
#  3. Add a redirection
#  4. Add hbnb_static location
nginx_conf="/etc/nginx/sites-available/default"
printf "%s\n" "##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	add_header X-Served-By \$hostname;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	error_page 404 /error-404.html;

	rewrite ^/redirect_me https://www.youtube.com/watch?v=QH2-TGUlwu4 permanent;

	location /hbnb_static {
		alias /data/web_static/current;
		index index.html index.htm;
	}

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files \$uri \$uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files \$uri \$uri/ =404;
#	}
#}" > $nginx_conf

# To refresh the caches and pick up new changes
sudo service nginx restart
